{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pedrolima/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId].js\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    description: props.meetupData.description,\n    title: props.meetupData.title,\n    address: props.meetupData.address\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/pedrolima/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId].js"],"names":["Fragment","MeetupDetail","MeetupDetails","props","meetupData","image","description","title","address"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AACzB,sBAAO,QAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAAtC;AAA6C,IAAA,WAAW,EAAEF,KAAK,CAACC,UAAN,CAAiBE,WAA3E;AAAwF,IAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAAhH;AAAwH,IAAA,OAAO,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAAlJ;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;KAFQN,a;;AAiDT,eAAeA,aAAf","sourcesContent":["import { Fragment } from \"react\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props){\n    return <MeetupDetail image={props.meetupData.image} description={props.meetupData.description} title={props.meetupData.title}  address={props.meetupData.address} />\n}\n\nexport async function getStaticPaths(){\n    //nextJs needs to generate all versions of meetupIds pages in advance for all the supported Ids\n    const client = await MongoClient.connect('mongodb+srv://pedrolima:Passw0rd123@cluster0.0gnif.mongodb.net/meetups?retryWrites=true&w=majority')\n    const db = client.db();\n\n    const meetupsCollections = db.collection('meetups');\n    //only fetching id\n    const meetups = await meetupsCollections.find({},{_id: 1}).toArray();\n    client.close();\n    return {\n        fallback: false,\n        paths: meetups.map((meetup => ({\n            params: {meetupId : meetup._id.toString()},\n        }))),\n    }\n\n}\n\nexport async function getStaticProps(context){\n    //in order to access the ID parameter which is on the URL can be accessed through context. \n    //hooks cannot be used in getStaticProps\n    //getStaticPaths is required for dynamic SSG pages \n\n    const meetupId = context.params.meetupId;\n    const client = await MongoClient.connect('mongodb+srv://pedrolima:Passw0rd123@cluster0.0gnif.mongodb.net/meetups?retryWrites=true&w=majority')\n    const db = client.db();\n    const meetupsCollections = db.collection('meetups');\n    const selectedMeetup = await meetupsCollections.findOne({_id: ObjectId(meetupId)})\n\n    console.log(selectedMeetup);\n    \n    return {\n        props: {\n            meetupData: {\n                    id: selectedMeetup._id.toString(),\n                    title: selectedMeetup.title,\n                    address: selectedMeetup.address,\n                    image: selectedMeetup.image,\n                    description: selectedMeetup.description,\n                }\n            },\n    }\n    \n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}