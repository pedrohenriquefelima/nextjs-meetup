{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pedrolima/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId].js\";\nimport { Fragment } from \"react\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(data) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    id: data.meetupData.id,\n    image: data.meetupData.image,\n    description: data.meetupData.description,\n    title: data.meetupData.title,\n    address: data.meetupData.address\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  //nextJs needs to generate all versions of meetupIds pages in advance for all the supported Ids\n  const client = await MongoClient.connect('mongodb+srv://pedrolima:Passw0rd123@cluster0.0gnif.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollections = db.collection('meetups'); //only fetching id\n\n  const meetups = await meetupsCollections.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  //in order to access the ID parameter which is on the URL can be accessed through context. \n  //hooks cannot be used in getStaticProps\n  //getStaticPaths is required for dynamic SSG pages \n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://pedrolima:Passw0rd123@cluster0.0gnif.mongodb.net/meetups?retryWrites=true&w=majority');\n  const meetupsCollections = db.collection('meetups');\n  const selectedMeetup = await meetupsCollections.findOne({\n    _id: meetupId\n  });\n  const db = client.db();\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/pedrolima/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId].js"],"names":["Fragment","MongoClient","MeetupDetail","MeetupDetails","data","meetupData","id","image","description","title","address","getStaticPaths","client","connect","db","meetupsCollections","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","console","log","props"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA4B;AACxB,sBAAO,QAAC,YAAD;AAAc,IAAA,EAAE,EAAEA,IAAI,CAACC,UAAL,CAAgBC,EAAlC;AAAsC,IAAA,KAAK,EAAEF,IAAI,CAACC,UAAL,CAAgBE,KAA7D;AAAoE,IAAA,WAAW,EAAEH,IAAI,CAACC,UAAL,CAAgBG,WAAjG;AAA8G,IAAA,KAAK,EAAEJ,IAAI,CAACC,UAAL,CAAgBI,KAArI;AAA6I,IAAA,OAAO,EAAEL,IAAI,CAACC,UAAL,CAAgBK;AAAtK;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AAED,OAAO,eAAeC,cAAf,GAA+B;AAClC;AACA,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,oGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B,CALkC,CAMlC;;AACA,QAAMC,OAAO,GAAG,MAAMF,kBAAkB,CAACG,IAAnB,CAAwB,EAAxB,EAA2B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA3B,EAAqCC,OAArC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAM,KAAK;AAC3BC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAGF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADmB,KAAL,CAAnB;AAFJ,GAAP;AAOH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AACzC;AACA;AACA;AAEA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,oGAApB,CAArB;AAEA,QAAME,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B;AACA,QAAMe,cAAc,GAAG,MAAMhB,kBAAkB,CAACiB,OAAnB,CAA2B;AAACb,IAAAA,GAAG,EAAEQ;AAAN,GAA3B,CAA7B;AACA,QAAMb,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACAmB,EAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AAEA,SAAO;AACHQ,IAAAA,KAAK,EAAE;AACH9B,MAAAA,UAAU,EAAE0B;AADT;AADJ,GAAP;AAKH;AAED,eAAe5B,aAAf","sourcesContent":["import { Fragment } from \"react\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(data){\n    return <MeetupDetail id={data.meetupData.id} image={data.meetupData.image} description={data.meetupData.description} title={data.meetupData.title}  address={data.meetupData.address} />\n}\n\nexport async function getStaticPaths(){\n    //nextJs needs to generate all versions of meetupIds pages in advance for all the supported Ids\n    const client = await MongoClient.connect('mongodb+srv://pedrolima:Passw0rd123@cluster0.0gnif.mongodb.net/meetups?retryWrites=true&w=majority')\n    const db = client.db();\n\n    const meetupsCollections = db.collection('meetups');\n    //only fetching id\n    const meetups = await meetupsCollections.find({},{_id: 1}).toArray();\n    client.close();\n    return {\n        fallback: false,\n        paths: meetups.map((meetup => ({\n            params: {meetupId : meetup._id.toString()},\n        }))),\n    }\n\n}\n\nexport async function getStaticProps(context){\n    //in order to access the ID parameter which is on the URL can be accessed through context. \n    //hooks cannot be used in getStaticProps\n    //getStaticPaths is required for dynamic SSG pages \n\n    const meetupId = context.params.meetupId;\n    const client = await MongoClient.connect('mongodb+srv://pedrolima:Passw0rd123@cluster0.0gnif.mongodb.net/meetups?retryWrites=true&w=majority')\n\n    const meetupsCollections = db.collection('meetups');\n    const selectedMeetup = await meetupsCollections.findOne({_id: meetupId})\n    const db = client.db();\n    console.log(meetupId);\n\n    return {\n        props: {\n            meetupData: selectedMeetup,\n        }\n    }\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}