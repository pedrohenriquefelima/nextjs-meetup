{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pedrolima/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId].js\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(data) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    id: data.meetupData.id,\n    image: data.meetupData.image,\n    description: data.meetupData.description,\n    title: data.meetupData.title,\n    address: data.meetupData.address\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/pedrolima/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId].js"],"names":["Fragment","MeetupDetail","MeetupDetails","data","meetupData","id","image","description","title","address"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA4B;AACxB,sBAAO,QAAC,YAAD;AAAc,IAAA,EAAE,EAAEA,IAAI,CAACC,UAAL,CAAgBC,EAAlC;AAAsC,IAAA,KAAK,EAAEF,IAAI,CAACC,UAAL,CAAgBE,KAA7D;AAAoE,IAAA,WAAW,EAAEH,IAAI,CAACC,UAAL,CAAgBG,WAAjG;AAA8G,IAAA,KAAK,EAAEJ,IAAI,CAACC,UAAL,CAAgBI,KAArI;AAA6I,IAAA,OAAO,EAAEL,IAAI,CAACC,UAAL,CAAgBK;AAAtK;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;KAFQP,a;;AAyCT,eAAeA,aAAf","sourcesContent":["import { Fragment } from \"react\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(data){\n    return <MeetupDetail id={data.meetupData.id} image={data.meetupData.image} description={data.meetupData.description} title={data.meetupData.title}  address={data.meetupData.address} />\n}\n\nexport async function getStaticPaths(){\n    //nextJs needs to generate all versions of meetupIds pages in advance for all the supported Ids\n    const client = await MongoClient.connect('mongodb+srv://pedrolima:Passw0rd123@cluster0.0gnif.mongodb.net/meetups?retryWrites=true&w=majority')\n    const db = client.db();\n\n    const meetupsCollections = db.collection('meetups');\n    //only fetching id\n    const meetups = await meetupsCollections.find({},{_id: 1}).toArray();\n    client.close();\n    return {\n        fallback: false,\n        paths: meetups.map((meetup => ({\n            params: {meetupId : meetup._id.toString()},\n        }))),\n    }\n\n}\n\nexport async function getStaticProps(context){\n    //in order to access the ID parameter which is on the URL can be accessed through context. \n    //hooks cannot be used in getStaticProps\n    //getStaticPaths is required for dynamic SSG pages \n\n    const meetupId = context.params.meetupId;\n    const client = await MongoClient.connect('mongodb+srv://pedrolima:Passw0rd123@cluster0.0gnif.mongodb.net/meetups?retryWrites=true&w=majority')\n    const db = client.db();\n    const meetupsCollections = db.collection('meetups');\n    const selectedMeetup = await meetupsCollections.findOne({_id: meetupId})\n\n\n    return {\n        props: {\n            meetupData: selectedMeetup,\n        }\n    }\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}